// Generated by gencpp from file ras_carla/RasObject.msg
// DO NOT EDIT!


#ifndef RAS_CARLA_MESSAGE_RASOBJECT_H
#define RAS_CARLA_MESSAGE_RASOBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <derived_object_msgs/Object.h>

namespace ras_carla
{
template <class ContainerAllocator>
struct RasObject_
{
  typedef RasObject_<ContainerAllocator> Type;

  RasObject_()
    : object()
    , distance(0.0)
    , shift_x(0.0)
    , shift_y(0.0)
    , is_front(false)
    , importance(0.0)  {
    }
  RasObject_(const ContainerAllocator& _alloc)
    : object(_alloc)
    , distance(0.0)
    , shift_x(0.0)
    , shift_y(0.0)
    , is_front(false)
    , importance(0.0)  {
  (void)_alloc;
    }



   typedef  ::derived_object_msgs::Object_<ContainerAllocator>  _object_type;
  _object_type object;

   typedef float _distance_type;
  _distance_type distance;

   typedef float _shift_x_type;
  _shift_x_type shift_x;

   typedef float _shift_y_type;
  _shift_y_type shift_y;

   typedef uint8_t _is_front_type;
  _is_front_type is_front;

   typedef float _importance_type;
  _importance_type importance;





  typedef boost::shared_ptr< ::ras_carla::RasObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ras_carla::RasObject_<ContainerAllocator> const> ConstPtr;

}; // struct RasObject_

typedef ::ras_carla::RasObject_<std::allocator<void> > RasObject;

typedef boost::shared_ptr< ::ras_carla::RasObject > RasObjectPtr;
typedef boost::shared_ptr< ::ras_carla::RasObject const> RasObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ras_carla::RasObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ras_carla::RasObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ras_carla

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'ras_carla': ['/home/mad-carla/share/catkin_ws/src/ras_carla/msg'], 'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'derived_object_msgs': ['/opt/ros/kinetic/share/derived_object_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'radar_msgs': ['/opt/ros/kinetic/share/radar_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ras_carla::RasObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ras_carla::RasObject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ras_carla::RasObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ras_carla::RasObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ras_carla::RasObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ras_carla::RasObject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ras_carla::RasObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6890397792f930487f9106664fc3bee3";
  }

  static const char* value(const ::ras_carla::RasObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6890397792f93048ULL;
  static const uint64_t static_value2 = 0x7f9106664fc3bee3ULL;
};

template<class ContainerAllocator>
struct DataType< ::ras_carla::RasObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ras_carla/RasObject";
  }

  static const char* value(const ::ras_carla::RasObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ras_carla::RasObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "derived_object_msgs/Object object\n\
float32 distance\n\
float32 shift_x\n\
float32 shift_y\n\
bool is_front\n\
float32 importance\n\
\n\
================================================================================\n\
MSG: derived_object_msgs/Object\n\
# This represents a detected or tracked object with reference coordinate frame and timestamp.\n\
\n\
Header header\n\
\n\
# The id of the object (presumably from the detecting sensor).\n\
uint32 id\n\
\n\
# A Detected object is one which has been seen in at least one scan/frame of a sensor.\n\
# A Tracked object is one which has been correlated over multiple scans/frames of a sensor.\n\
# An object which is detected can only be assumed to have valid pose and shape properties.\n\
# An object which is tracked should also be assumed to have valid twist and accel properties.\n\
uint8 detection_level\n\
\n\
uint8 OBJECT_DETECTED=0\n\
uint8 OBJECT_TRACKED=1\n\
\n\
# A Classified object is one which has been identified as a certain object type.\n\
# Classified objects should have valid classification, classification_certainty, and classification_age properties.\n\
bool object_classified\n\
\n\
# The detected position and orientation of the object.\n\
geometry_msgs/Pose pose\n\
\n\
# The detected linear and angular velocities of the object.\n\
geometry_msgs/Twist twist\n\
\n\
# The detected linear and angular accelerations of the object.\n\
geometry_msgs/Accel accel\n\
\n\
# (OPTIONAL) The polygon defining the detection points at the outer edges of the object.\n\
geometry_msgs/Polygon polygon\n\
\n\
# A shape conforming to the outer bounding edges of the object.\n\
shape_msgs/SolidPrimitive shape\n\
\n\
# The type of classification given to this object.\n\
uint8 classification\n\
\n\
uint8 CLASSIFICATION_UNKNOWN=0\n\
uint8 CLASSIFICATION_UNKNOWN_SMALL=1\n\
uint8 CLASSIFICATION_UNKNOWN_MEDIUM=2\n\
uint8 CLASSIFICATION_UNKNOWN_BIG=3\n\
uint8 CLASSIFICATION_PEDESTRIAN=4\n\
uint8 CLASSIFICATION_BIKE=5\n\
uint8 CLASSIFICATION_CAR=6\n\
uint8 CLASSIFICATION_TRUCK=7\n\
uint8 CLASSIFICATION_MOTORCYCLE=8\n\
uint8 CLASSIFICATION_OTHER_VEHICLE=9\n\
uint8 CLASSIFICATION_BARRIER=10\n\
uint8 CLASSIFICATION_SIGN=11\n\
\n\
# The certainty of the classification from the originating sensor.\n\
# Higher value indicates greater certainty (MAX=255).\n\
# It is recommended that a native sensor value be scaled to 0-255 for interoperability.\n\
uint8 classification_certainty\n\
\n\
# The number of scans/frames from the sensor that this object has been classified as the current classification.\n\
uint32 classification_age\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Accel\n\
# This expresses acceleration in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Polygon\n\
#A specification of a polygon where the first and last points are assumed to be connected\n\
Point32[] points\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: shape_msgs/SolidPrimitive\n\
# Define box, sphere, cylinder, cone \n\
# All shapes are defined to have their bounding boxes centered around 0,0,0.\n\
\n\
uint8 BOX=1\n\
uint8 SPHERE=2\n\
uint8 CYLINDER=3\n\
uint8 CONE=4\n\
\n\
# The type of the shape\n\
uint8 type\n\
\n\
\n\
# The dimensions of the shape\n\
float64[] dimensions\n\
\n\
# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array\n\
\n\
# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding\n\
# sides of the box.\n\
uint8 BOX_X=0\n\
uint8 BOX_Y=1\n\
uint8 BOX_Z=2\n\
\n\
\n\
# For the SPHERE type, only one component is used, and it gives the radius of\n\
# the sphere.\n\
uint8 SPHERE_RADIUS=0\n\
\n\
\n\
# For the CYLINDER and CONE types, the center line is oriented along\n\
# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component\n\
# of dimensions gives the height of the cylinder (cone).  The\n\
# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the\n\
# radius of the base of the cylinder (cone).  Cone and cylinder\n\
# primitives are defined to be circular. The tip of the cone is\n\
# pointing up, along +Z axis.\n\
\n\
uint8 CYLINDER_HEIGHT=0\n\
uint8 CYLINDER_RADIUS=1\n\
\n\
uint8 CONE_HEIGHT=0\n\
uint8 CONE_RADIUS=1\n\
";
  }

  static const char* value(const ::ras_carla::RasObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ras_carla::RasObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object);
      stream.next(m.distance);
      stream.next(m.shift_x);
      stream.next(m.shift_y);
      stream.next(m.is_front);
      stream.next(m.importance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RasObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ras_carla::RasObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ras_carla::RasObject_<ContainerAllocator>& v)
  {
    s << indent << "object: ";
    s << std::endl;
    Printer< ::derived_object_msgs::Object_<ContainerAllocator> >::stream(s, indent + "  ", v.object);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "shift_x: ";
    Printer<float>::stream(s, indent + "  ", v.shift_x);
    s << indent << "shift_y: ";
    Printer<float>::stream(s, indent + "  ", v.shift_y);
    s << indent << "is_front: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_front);
    s << indent << "importance: ";
    Printer<float>::stream(s, indent + "  ", v.importance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAS_CARLA_MESSAGE_RASOBJECT_H
