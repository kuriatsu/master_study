// Generated by gencpp from file data_logger/swipe_obstacles_log.msg
// DO NOT EDIT!


#ifndef DATA_LOGGER_MESSAGE_SWIPE_OBSTACLES_LOG_H
#define DATA_LOGGER_MESSAGE_SWIPE_OBSTACLES_LOG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Twist.h>

namespace data_logger
{
template <class ContainerAllocator>
struct swipe_obstacles_log_
{
  typedef swipe_obstacles_log_<ContainerAllocator> Type;

  swipe_obstacles_log_()
    : header()
    , round(0)
    , pose()
    , odom()
    , autoware_twist()
    , ypspur_twist()
    , brake(0.0)
    , accel(0.0)
    , shift(0)
    , obstacle_id(0)
    , detected_flag(0)
    , pedestrian_flag(0)  {
    }
  swipe_obstacles_log_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , round(0)
    , pose(_alloc)
    , odom(_alloc)
    , autoware_twist(_alloc)
    , ypspur_twist(_alloc)
    , brake(0.0)
    , accel(0.0)
    , shift(0)
    , obstacle_id(0)
    , detected_flag(0)
    , pedestrian_flag(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _round_type;
  _round_type round;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _odom_type;
  _odom_type odom;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _autoware_twist_type;
  _autoware_twist_type autoware_twist;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _ypspur_twist_type;
  _ypspur_twist_type ypspur_twist;

   typedef float _brake_type;
  _brake_type brake;

   typedef float _accel_type;
  _accel_type accel;

   typedef uint32_t _shift_type;
  _shift_type shift;

   typedef uint32_t _obstacle_id_type;
  _obstacle_id_type obstacle_id;

   typedef uint32_t _detected_flag_type;
  _detected_flag_type detected_flag;

   typedef uint32_t _pedestrian_flag_type;
  _pedestrian_flag_type pedestrian_flag;





  typedef boost::shared_ptr< ::data_logger::swipe_obstacles_log_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::data_logger::swipe_obstacles_log_<ContainerAllocator> const> ConstPtr;

}; // struct swipe_obstacles_log_

typedef ::data_logger::swipe_obstacles_log_<std::allocator<void> > swipe_obstacles_log;

typedef boost::shared_ptr< ::data_logger::swipe_obstacles_log > swipe_obstacles_logPtr;
typedef boost::shared_ptr< ::data_logger::swipe_obstacles_log const> swipe_obstacles_logConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::data_logger::swipe_obstacles_log_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::data_logger::swipe_obstacles_log_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace data_logger

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'data_logger': ['/home/mad-carla/share/catkin_ws/src/data_logger/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::data_logger::swipe_obstacles_log_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::data_logger::swipe_obstacles_log_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::data_logger::swipe_obstacles_log_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::data_logger::swipe_obstacles_log_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_logger::swipe_obstacles_log_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_logger::swipe_obstacles_log_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::data_logger::swipe_obstacles_log_<ContainerAllocator> >
{
  static const char* value()
  {
    return "40f7308363d60b6e3d831771732fa8bd";
  }

  static const char* value(const ::data_logger::swipe_obstacles_log_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x40f7308363d60b6eULL;
  static const uint64_t static_value2 = 0x3d831771732fa8bdULL;
};

template<class ContainerAllocator>
struct DataType< ::data_logger::swipe_obstacles_log_<ContainerAllocator> >
{
  static const char* value()
  {
    return "data_logger/swipe_obstacles_log";
  }

  static const char* value(const ::data_logger::swipe_obstacles_log_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::data_logger::swipe_obstacles_log_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
\n\
uint32 round\n\
geometry_msgs/Pose pose\n\
geometry_msgs/Pose odom\n\
geometry_msgs/Twist autoware_twist\n\
geometry_msgs/Twist ypspur_twist\n\
float32 brake\n\
float32 accel\n\
uint32 shift\n\
uint32 obstacle_id\n\
uint32 detected_flag\n\
uint32 pedestrian_flag\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::data_logger::swipe_obstacles_log_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::data_logger::swipe_obstacles_log_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.round);
      stream.next(m.pose);
      stream.next(m.odom);
      stream.next(m.autoware_twist);
      stream.next(m.ypspur_twist);
      stream.next(m.brake);
      stream.next(m.accel);
      stream.next(m.shift);
      stream.next(m.obstacle_id);
      stream.next(m.detected_flag);
      stream.next(m.pedestrian_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct swipe_obstacles_log_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::data_logger::swipe_obstacles_log_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::data_logger::swipe_obstacles_log_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "round: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.round);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "odom: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.odom);
    s << indent << "autoware_twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.autoware_twist);
    s << indent << "ypspur_twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.ypspur_twist);
    s << indent << "brake: ";
    Printer<float>::stream(s, indent + "  ", v.brake);
    s << indent << "accel: ";
    Printer<float>::stream(s, indent + "  ", v.accel);
    s << indent << "shift: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.shift);
    s << indent << "obstacle_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.obstacle_id);
    s << indent << "detected_flag: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.detected_flag);
    s << indent << "pedestrian_flag: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.pedestrian_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DATA_LOGGER_MESSAGE_SWIPE_OBSTACLES_LOG_H
