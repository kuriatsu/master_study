# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from data_logger/swipe_obstacles_log.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class swipe_obstacles_log(genpy.Message):
  _md5sum = "40f7308363d60b6e3d831771732fa8bd"
  _type = "data_logger/swipe_obstacles_log"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

uint32 round
geometry_msgs/Pose pose
geometry_msgs/Pose odom
geometry_msgs/Twist autoware_twist
geometry_msgs/Twist ypspur_twist
float32 brake
float32 accel
uint32 shift
uint32 obstacle_id
uint32 detected_flag
uint32 pedestrian_flag

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','round','pose','odom','autoware_twist','ypspur_twist','brake','accel','shift','obstacle_id','detected_flag','pedestrian_flag']
  _slot_types = ['std_msgs/Header','uint32','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Twist','geometry_msgs/Twist','float32','float32','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,round,pose,odom,autoware_twist,ypspur_twist,brake,accel,shift,obstacle_id,detected_flag,pedestrian_flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(swipe_obstacles_log, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.round is None:
        self.round = 0
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.odom is None:
        self.odom = geometry_msgs.msg.Pose()
      if self.autoware_twist is None:
        self.autoware_twist = geometry_msgs.msg.Twist()
      if self.ypspur_twist is None:
        self.ypspur_twist = geometry_msgs.msg.Twist()
      if self.brake is None:
        self.brake = 0.
      if self.accel is None:
        self.accel = 0.
      if self.shift is None:
        self.shift = 0
      if self.obstacle_id is None:
        self.obstacle_id = 0
      if self.detected_flag is None:
        self.detected_flag = 0
      if self.pedestrian_flag is None:
        self.pedestrian_flag = 0
    else:
      self.header = std_msgs.msg.Header()
      self.round = 0
      self.pose = geometry_msgs.msg.Pose()
      self.odom = geometry_msgs.msg.Pose()
      self.autoware_twist = geometry_msgs.msg.Twist()
      self.ypspur_twist = geometry_msgs.msg.Twist()
      self.brake = 0.
      self.accel = 0.
      self.shift = 0
      self.obstacle_id = 0
      self.detected_flag = 0
      self.pedestrian_flag = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I26d2f4I().pack(_x.round, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.odom.position.x, _x.odom.position.y, _x.odom.position.z, _x.odom.orientation.x, _x.odom.orientation.y, _x.odom.orientation.z, _x.odom.orientation.w, _x.autoware_twist.linear.x, _x.autoware_twist.linear.y, _x.autoware_twist.linear.z, _x.autoware_twist.angular.x, _x.autoware_twist.angular.y, _x.autoware_twist.angular.z, _x.ypspur_twist.linear.x, _x.ypspur_twist.linear.y, _x.ypspur_twist.linear.z, _x.ypspur_twist.angular.x, _x.ypspur_twist.angular.y, _x.ypspur_twist.angular.z, _x.brake, _x.accel, _x.shift, _x.obstacle_id, _x.detected_flag, _x.pedestrian_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.odom is None:
        self.odom = geometry_msgs.msg.Pose()
      if self.autoware_twist is None:
        self.autoware_twist = geometry_msgs.msg.Twist()
      if self.ypspur_twist is None:
        self.ypspur_twist = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 236
      (_x.round, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.odom.position.x, _x.odom.position.y, _x.odom.position.z, _x.odom.orientation.x, _x.odom.orientation.y, _x.odom.orientation.z, _x.odom.orientation.w, _x.autoware_twist.linear.x, _x.autoware_twist.linear.y, _x.autoware_twist.linear.z, _x.autoware_twist.angular.x, _x.autoware_twist.angular.y, _x.autoware_twist.angular.z, _x.ypspur_twist.linear.x, _x.ypspur_twist.linear.y, _x.ypspur_twist.linear.z, _x.ypspur_twist.angular.x, _x.ypspur_twist.angular.y, _x.ypspur_twist.angular.z, _x.brake, _x.accel, _x.shift, _x.obstacle_id, _x.detected_flag, _x.pedestrian_flag,) = _get_struct_I26d2f4I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I26d2f4I().pack(_x.round, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.odom.position.x, _x.odom.position.y, _x.odom.position.z, _x.odom.orientation.x, _x.odom.orientation.y, _x.odom.orientation.z, _x.odom.orientation.w, _x.autoware_twist.linear.x, _x.autoware_twist.linear.y, _x.autoware_twist.linear.z, _x.autoware_twist.angular.x, _x.autoware_twist.angular.y, _x.autoware_twist.angular.z, _x.ypspur_twist.linear.x, _x.ypspur_twist.linear.y, _x.ypspur_twist.linear.z, _x.ypspur_twist.angular.x, _x.ypspur_twist.angular.y, _x.ypspur_twist.angular.z, _x.brake, _x.accel, _x.shift, _x.obstacle_id, _x.detected_flag, _x.pedestrian_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.odom is None:
        self.odom = geometry_msgs.msg.Pose()
      if self.autoware_twist is None:
        self.autoware_twist = geometry_msgs.msg.Twist()
      if self.ypspur_twist is None:
        self.ypspur_twist = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 236
      (_x.round, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.odom.position.x, _x.odom.position.y, _x.odom.position.z, _x.odom.orientation.x, _x.odom.orientation.y, _x.odom.orientation.z, _x.odom.orientation.w, _x.autoware_twist.linear.x, _x.autoware_twist.linear.y, _x.autoware_twist.linear.z, _x.autoware_twist.angular.x, _x.autoware_twist.angular.y, _x.autoware_twist.angular.z, _x.ypspur_twist.linear.x, _x.ypspur_twist.linear.y, _x.ypspur_twist.linear.z, _x.ypspur_twist.angular.x, _x.ypspur_twist.angular.y, _x.ypspur_twist.angular.z, _x.brake, _x.accel, _x.shift, _x.obstacle_id, _x.detected_flag, _x.pedestrian_flag,) = _get_struct_I26d2f4I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_I26d2f4I = None
def _get_struct_I26d2f4I():
    global _struct_I26d2f4I
    if _struct_I26d2f4I is None:
        _struct_I26d2f4I = struct.Struct("<I26d2f4I")
    return _struct_I26d2f4I
